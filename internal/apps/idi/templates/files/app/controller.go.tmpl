package rest

import (
	"context"
	"errors"
	"net/http"

	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/application"
	"{{.ProjectName}}/internal/dtos"
	"{{.ProjectName}}/internal/lib"
)

type {{ capitalize (cleanName .AppName) }}Controller struct {
	lib.IApp
	app application.I{{ capitalize (cleanName .AppName) }}
}

func New{{ capitalize (cleanName .AppName) }}Controller(rootApp lib.IApp, app application.I{{ capitalize (cleanName .AppName) }}) *{{ capitalize (cleanName .AppName) }}Controller {
	return &{{ capitalize (cleanName .AppName) }}Controller{
		rootApp,
		app,
	}
}

func (tc *{{capitalize (cleanName .AppName)}}Controller) Find{{capitalize (cleanName .AppName)}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	// parse -->  page, sort, filter etc in Find{{capitalize (cleanName .AppName)}}Params

	{{(cleanName .AppName)}}, err := tc.app.Find{{capitalize (cleanName .AppName)}}(ctx, &dtos.Find{{capitalize (cleanName .AppName)}}Params{})
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &Find{{capitalize (cleanName .AppName)}}Response{
		{{capitalize (cleanName .AppName)}}: {{(cleanName .AppName)}},
	})
}

func (tc *{{capitalize (cleanName .AppName)}}Controller) Create{{capitalize (trimS (cleanName .AppName))}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	args := &dtos.Create{{capitalize (trimS (cleanName .AppName))}}Params{}
	if err := tc.DecodeJSON(w, r, args); err != nil {
		tc.handleError(w, r, err)
		return
	}

	id, err := tc.app.Create{{capitalize (trimS (cleanName .AppName))}}(ctx, args)
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusCreated, &Create{{capitalize (trimS (cleanName .AppName))}}Response{
		{{capitalize (trimS (cleanName .AppName))}}ID: id,
	})
}

func (tc *{{capitalize (cleanName .AppName)}}Controller) Get{{capitalize (trimS (cleanName .AppName))}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	id, err := tc.ParseIntFromRequest("id", r)
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	{{trimS (cleanName .AppName)}}, err := tc.app.Get{{capitalize (trimS (cleanName .AppName))}}(ctx, &dtos.Get{{capitalize (trimS (cleanName .AppName))}}Params{
		ID: id,
	})
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &Get{{capitalize (trimS (cleanName .AppName))}}Response{
		{{capitalize (trimS (cleanName .AppName))}}: {{trimS (cleanName .AppName)}},
	})
}

func (tc *{{capitalize (cleanName .AppName)}}Controller) Patch{{capitalize (trimS (cleanName .AppName))}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	id, err := tc.ParseIntFromRequest("id", r)
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	args := &dtos.Update{{capitalize (trimS (cleanName .AppName))}}Params{}
	if err := tc.DecodeJSON(w, r, args); err != nil {
		tc.handleError(w, r, err)
		return
	}
	args.ID = id

	err = tc.app.Update{{capitalize (trimS (cleanName .AppName))}}(ctx, args)
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &dtos.HTTPMsg{
		Message: "patched successfully",
	})
}

func (tc *{{capitalize (cleanName .AppName)}}Controller) Delete{{capitalize (trimS (cleanName .AppName))}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	id, err := tc.ParseIntFromRequest("id", r)
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	err = tc.app.Delete{{capitalize (trimS (cleanName .AppName))}}(ctx, &dtos.Delete{{capitalize (trimS (cleanName .AppName))}}Params{
		ID: id,
	})
	if err != nil {
		tc.handleError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &dtos.HTTPMsg{
		Message: "deleted successfully",
	})
}


func (tc *{{capitalize (cleanName .AppName)}}Controller) handleError(w http.ResponseWriter, r *http.Request, err error) {
	switch {
	case errors.Is(err, lib.ErrInvalidParameterID):
		tc.UnprocessableEntity(w, r, &dtos.HTTPErrMsg{
			Error: err.Error(),
		})
	case errors.As(err, &lib.ErrInvalidJSON{}):
		tc.BadRequest(w, r, &dtos.HTTPErrMsg{
			Error: err.Error(),
		})
	case errors.As(err, &lib.ErrInvalidData{}):
		e := err.(lib.ErrInvalidData)
		tc.UnprocessableEntity(w, r, &dtos.HTTPErrs{
			Errors: e.GetErrors(),
		})
	case errors.Is(err, lib.ErrNoRecord):
		tc.NotFound(w, r)
	default:
		tc.ServerError(w, r, err)
	}
}