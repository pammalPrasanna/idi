package rest

import (
	"context"
	"errors"
	"net/http"

	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/application"
	"{{.ProjectName}}/internal/dtos"
	"{{.ProjectName}}/internal/lib"
)

type {{.AppName}}Controller struct {
	lib.IApp
	app application.I{{ capitalize .AppName }}
}

func New{{ capitalize .AppName }}Controller(rootApp lib.IApp, app application.I{{ capitalize .AppName }}) *{{ capitalize .AppName }}Controller {
	return &{{.AppName}}Controller{
		rootApp,
		app,
	}
}

func (tc *{{.AppName}}Controller) find{{capitalize .AppName}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	// parse -->  page, sort, filter etc in Find{{capitalize .AppName}}Params

	{{.AppName}}, err := tc.app.Find{{capitalize .AppName}}(ctx, &dtos.Find{{capitalize .AppName}}Params{})
	if err != nil {
		// data error
		if errors.As(err, &lib.ErrInvalidData{}) {
			tc.UnprocessableEntity(w, r, err)
			return
		}
		// db error
		tc.ServerError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &Find{{capitalize .AppName}}Response{
		{{capitalize .AppName}}: {{.AppName}},
	})
}

func (tc *{{.AppName}}Controller) create{{capitalize .AppName}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	args := &dtos.Create{{capitalize (trimS .AppName)}}Params{}
	if err := tc.DecodeJSON(w, r, args); err != nil {
		tc.BadRequest(w, r, err)
		return
	}

	id, err := tc.app.Create{{capitalize (trimS .AppName)}}(ctx, args)
	if err != nil {
		// data error
		if errors.As(err, &lib.ErrInvalidData{}) {
			e := err.(lib.ErrInvalidData)
			tc.UnprocessableEntity(w, r, &dtos.HTTPErrs{
				Errors: e.GetErrors(),
			})
			return
		}
	}

	tc.JSON(w, http.StatusOK, &Create{{capitalize (trimS .AppName)}}Response{
		{{capitalize (trimS .AppName)}}ID: id,
	})
}

func (tc *{{.AppName}}Controller) get{{capitalize .AppName}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	id, err := tc.ParseIntFromRequest("id", r)
	if err != nil {
		tc.BadRequest(w, r, err)
		return
	}

	todo, err := tc.app.Get{{capitalize (trimS .AppName)}}(ctx, &dtos.Get{{capitalize (trimS .AppName)}}Params{
		ID: id,
	})
	if err != nil {
		if errors.Is(err, lib.ErrNoRecord) {
			tc.JSON(w, http.StatusNotFound, &dtos.HTTPErrMsg{
				Error: "todo not found",
			})
			return
		}
		tc.ServerError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &Get{{capitalize (trimS .AppName)}}Response{
		{{capitalize (trimS .AppName)}}: todo,
	})
}

func (tc *{{.AppName}}Controller) update{{capitalize .AppName}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	id, err := tc.ParseIntFromRequest("id", r)
	if err != nil {
		tc.BadRequest(w, r, err)
		return
	}

	args := &dtos.Update{{capitalize (trimS .AppName)}}Params{}
	if err := tc.DecodeJSON(w, r, args); err != nil {
		tc.BadRequest(w, r, err)
		return
	}
	args.ID = id

	err = tc.app.Update{{capitalize (trimS .AppName)}}(ctx, args)
	if err != nil {
		if errors.As(err, &lib.ErrInvalidData{}) {
			e := err.(lib.ErrInvalidData)
			tc.UnprocessableEntity(w, r, &dtos.HTTPErrs{
				Errors: e.GetErrors(),
			})
			return
		} else if errors.Is(err, lib.ErrNoRecord) {
			tc.NotFound(w, r)
			return
		}
		tc.ServerError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &dtos.HTTPMsg{
		Message: "updated successfully",
	})
}

func (tc *{{.AppName}}Controller) delete{{capitalize .AppName}}H(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), tc.ContextTime())
	defer cancel()

	id, err := tc.ParseIntFromRequest("id", r)
	if err != nil {
		tc.BadRequest(w, r, err)
		return
	}

	err = tc.app.Delete{{capitalize (trimS .AppName)}}(ctx, &dtos.Delete{{capitalize (trimS .AppName)}}Params{
		ID: id,
	})
	if err != nil {
		if errors.Is(err, lib.ErrNoRecord) {
			tc.NotFound(w, r)
			return
		}
		tc.ServerError(w, r, err)
		return
	}

	tc.JSON(w, http.StatusOK, &dtos.HTTPMsg{
		Message: "deleted successfully",
	})
}
