package {{(cleanName .AppName)}}_test

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	rest "{{.ProjectName}}/internal/apps/{{.AppName}}/internal/adapters/httprouter"
	"{{.ProjectName}}/internal/dtos"
	"{{.ProjectName}}/internal/lib"
	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/adapters/sqlite3"
	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/application"
	
	"github.com/google/go-cmp/cmp"
	"github.com/golang/mock/gomock"
	"github.com/julienschmidt/httprouter"
	"github.com/stretchr/testify/assert"
)

// GET /{{(cleanName .AppName)}}
// 200, 500

// GET /{{(cleanName .AppName)}}/:id
// 200, 404, 422, 500

// PUT /{{(cleanName .AppName)}}/:id
// 200, 400, 422, 500

// DELETE /{{(cleanName .AppName)}}/:id
// 200, 404, 422, 500

// Authentication tests

type handlerTests struct {
	url    string
	method string
	tests  []restTc
}

type restTc struct {
	body           []byte
	tcName         string
	schema         string
	targetUrl      string
	expectedStatus int
	mockReturns    []any
}


func createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t *testing.T) []byte {
	uj, err := json.Marshal(&dtos.Create{{capitalize (trimS (cleanName .AppName))}}Params{
		Username: "",
		{{if eq (cleanName .AppName) "users"}}
		Email:    "",
		Password: "",
		{{end}}

	})
	assert.Nil(t, err)
	return uj
}

func createValid{{capitalize (trimS (cleanName .AppName))}}Bytes(t *testing.T) []byte {
	uj, err := json.Marshal(&dtos.Create{{capitalize (trimS (cleanName .AppName))}}Params{
		Username: randString(5),
		{{if eq (cleanName .AppName) "users"}}
		Email:    randomEmail(),
		Password: randString(8),
		{{end}}
	})
	assert.Nil(t, err)
	return uj
}


func createRESTTestCases(t *testing.T) []handlerTests {
	t.Helper()

	valid{{capitalize (trimS (cleanName .AppName))}} := createValid{{capitalize (trimS (cleanName .AppName))}}(t)
	valid{{capitalize (trimS (cleanName .AppName))}}Json, err := json.Marshal(valid{{capitalize (trimS (cleanName .AppName))}})
	assert.Nil(t, err)

	created{{capitalize (trimS (cleanName .AppName))}} := &dtos.{{capitalize (trimS (cleanName .AppName))}}{
		ID:        1,
		Username:  randString(5),
		{{if eq (cleanName .AppName) "{{(cleanName .AppName)}}"}}
		Email:     randomEmail(),
		{{end}}
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	tc := []handlerTests{
		{
			url:    "/{{(cleanName .AppName)}}",
			method: http.MethodGet,
			// GET /{{(cleanName .AppName)}}
			// 200, 200, 500
			tests: []restTc{
				{
					tcName:         "find {{(cleanName .AppName)}} empty list",
					schema:         find{{capitalize (cleanName .AppName)}}Schema200,
					expectedStatus: http.StatusOK,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns:    []any{[]*dtos.{{capitalize (trimS (cleanName .AppName))}}{}, nil},
				},
				{
					tcName:         "find {{(cleanName .AppName)}} with data",
					schema:         find{{capitalize (cleanName .AppName)}}Schema200,
					expectedStatus: http.StatusOK,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns:    []any{[]*dtos.{{capitalize (trimS (cleanName .AppName))}}{created{{capitalize (trimS (cleanName .AppName))}}}, nil},
				},
				{
					tcName:         "internal server error",
					schema:         {{trimS (cleanName .AppName)}}Schema500,
					expectedStatus: http.StatusInternalServerError,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns:    []any{nil, errors.New("")},
				},
			},
		},
		{
			url:    "/{{(cleanName .AppName)}}/:id",
			method: http.MethodGet,
			// GET /{{(cleanName .AppName)}}/:id
			// 200, 404, 422, 500
			tests: []restTc{
				{
					tcName:         "get {{trimS (cleanName .AppName)}} with id",
					schema:         get{{capitalize (trimS (cleanName .AppName))}}Schema200,
					expectedStatus: http.StatusOK,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{&dtos.{{capitalize (trimS (cleanName .AppName))}}{ID: 1, Username: "qwer", Email: randomEmail(), CreatedAt: time.Now(), UpdatedAt: time.Now()}, nil},
				},
				{
					tcName:         "record not found",
					schema:         {{trimS (cleanName .AppName)}}Schema404,
					expectedStatus: http.StatusNotFound,
					targetUrl:      "/{{(cleanName .AppName)}}/10000",
					mockReturns:    []any{nil, lib.ErrNoRecord},
				},
				{
					tcName:         "invalid id",
					schema:         {{trimS (cleanName .AppName)}}SchemaInvalidID422,
					expectedStatus: http.StatusUnprocessableEntity,
					targetUrl:      "/{{(cleanName .AppName)}}/{{.ProjectName}}",
					mockReturns:    nil,
				},
				{
					tcName:         "internal server error",
					schema:         {{trimS (cleanName .AppName)}}Schema500,
					expectedStatus: http.StatusInternalServerError,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{nil, errors.New("")},
				},
			},
		},
		{
			url:    "/{{(cleanName .AppName)}}",
			method: http.MethodPost,
			// POST /{{(cleanName .AppName)}}
			// 201, 400, 422, 500
			tests: []restTc{
				{
					tcName:         "create {{trimS (cleanName .AppName)}}",
					schema:         post{{capitalize (trimS (cleanName .AppName))}}Schema201,
					expectedStatus: http.StatusCreated,
					body:           valid{{capitalize (trimS (cleanName .AppName))}}Json,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns:    []any{int64(1), nil},
				},
				{
					tcName:         "malformed json",
					schema:         {{trimS (cleanName .AppName)}}Schema400,
					expectedStatus: http.StatusBadRequest,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns:    []any{int64(1), nil},
					body:           []byte(`{"username":}`),
				},
				{
					tcName:         "validation errors",
					schema:         {{trimS (cleanName .AppName)}}Schema422,
					expectedStatus: http.StatusUnprocessableEntity,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns: []any{
						int64(-1), lib.ErrInvalidData{
							"username": []string{},
							{{if eq (cleanName .AppName) "users"}}
							"email":    []string{},
							"password": []string{},
							{{end}}
						},
					},
					body: createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t),
				},
				{
					tcName:         "internal server error",
					schema:         {{trimS (cleanName .AppName)}}Schema500,
					expectedStatus: http.StatusInternalServerError,
					targetUrl:      "/{{(cleanName .AppName)}}",
					mockReturns:    []any{int64(-1), errors.New("")},
					body:           valid{{capitalize (trimS (cleanName .AppName))}}Json,
				},
			},
		},
		{
			url:    "/{{(cleanName .AppName)}}/:id",
			method: http.MethodPatch,
			// 200, 400, 404, 422, 500
			tests: []restTc{
				{
					tcName:         "successful patch",
					schema:         patch{{capitalize (trimS (cleanName .AppName))}}Schema200,
					expectedStatus: http.StatusOK,
					body:           valid{{capitalize (trimS (cleanName .AppName))}}Json,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{nil},
				},
				{
					tcName:         "malformed json",
					schema:         {{trimS (cleanName .AppName)}}Schema400,
					expectedStatus: http.StatusBadRequest,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{nil},
					body:           []byte(`{"username":}`),
				},
				{
					tcName:         "record not found",
					schema:         {{trimS (cleanName .AppName)}}Schema404,
					expectedStatus: http.StatusNotFound,
					targetUrl:      "/{{(cleanName .AppName)}}/10000",
					mockReturns:    []any{lib.ErrNoRecord},
					body:           createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t),
				},
				{
					tcName:         "invalid id",
					schema:         {{trimS (cleanName .AppName)}}SchemaInvalidID422,
					expectedStatus: http.StatusUnprocessableEntity,
					targetUrl:      "/{{(cleanName .AppName)}}/-1",
					mockReturns:    []any{nil},
					body:           createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t),
				},
				{
					tcName:         "validation errors",
					schema:         {{trimS (cleanName .AppName)}}Schema422,
					expectedStatus: http.StatusUnprocessableEntity,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns: []any{
						lib.ErrInvalidData{
							"username": []string{},
							{{if eq (cleanName .AppName) "users"}}
							"email":    []string{},
							"password": []string{},
							{{end}}
						},
					},
					body: createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t),
				},
				{
					tcName:         "internal server error",
					schema:         {{trimS (cleanName .AppName)}}Schema500,
					expectedStatus: http.StatusInternalServerError,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{errors.New("")},
					body:           valid{{capitalize (trimS (cleanName .AppName))}}Json,
				},
			},
		},
		{
			url:    "/{{(cleanName .AppName)}}/:id",
			method: http.MethodDelete,
			// 200, 400, 404, 422, 500
			tests: []restTc{
				{
					tcName:         "successful delete",
					schema:         delete{{capitalize (trimS (cleanName .AppName))}}Schema200,
					expectedStatus: http.StatusOK,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{nil},
				},
				{
					tcName:         "no record found",
					schema:         {{trimS (cleanName .AppName)}}Schema404,
					expectedStatus: http.StatusNotFound,
					targetUrl:      "/{{(cleanName .AppName)}}/10000",
					mockReturns:    []any{lib.ErrNoRecord},
				},
				{
					tcName:         "invalid id",
					schema:         {{trimS (cleanName .AppName)}}SchemaInvalidID422,
					expectedStatus: http.StatusUnprocessableEntity,
					targetUrl:      "/{{(cleanName .AppName)}}/-1",
					mockReturns:    []any{nil},
					body:           createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t),
				},
				{
					tcName:         "internal server error",
					schema:         {{trimS (cleanName .AppName)}}Schema500,
					expectedStatus: http.StatusInternalServerError,
					targetUrl:      "/{{(cleanName .AppName)}}/1",
					mockReturns:    []any{errors.New("")},
					body:           valid{{capitalize (trimS (cleanName .AppName))}}Json,
				},
			},
		},
	}

	return tc
}

func createNewRequest(t *testing.T, method, url string, body []byte) *http.Request {
	t.Helper()
	if body != nil {
		return httptest.NewRequest(method, url, bytes.NewReader(body))
	}
	return httptest.NewRequest(method, url, nil)
}

func getResponseBody(t *testing.T, w *httptest.ResponseRecorder) []byte {
	t.Helper()

	body, err := io.ReadAll(w.Result().Body)
	assert.Nil(t, err, "want nil")
	defer w.Result().Body.Close()

	return body
}


func Test{{capitalize (cleanName .AppName)}}Controller(t *testing.T) {
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	for _, handler := range createRESTTestCases(t) {
		for _, tc := range handler.tests {
			t.Run(fmt.Sprintf("-- SchemaValidation | %s  | %s %s - %d", tc.tcName, handler.method, handler.url, tc.expectedStatus), func(t *testing.T) {
				t.Parallel()
				mockApp := NewMockI{{capitalize (cleanName .AppName)}}(ctrl)
				{{(cleanName .AppName)}}Controller := rest.New{{capitalize (cleanName .AppName)}}Controller(rootApp, mockApp)

				router := httprouter.New()

				switch {
				case handler.method == http.MethodGet && handler.url == "/{{(cleanName .AppName)}}":
					router.HandlerFunc(handler.method, handler.url, {{(cleanName .AppName)}}Controller.Find{{capitalize (cleanName .AppName)}}H)
					if tc.mockReturns != nil {
						mockApp.EXPECT().Find{{capitalize (cleanName .AppName)}}(gomock.Any(), gomock.Any()).Return(tc.mockReturns...).Times(1)
					}
				case handler.method == http.MethodGet && handler.url == "/{{(cleanName .AppName)}}/:id":
					router.HandlerFunc(handler.method, handler.url, {{(cleanName .AppName)}}Controller.Get{{capitalize (trimS (cleanName .AppName))}}H)
					if tc.mockReturns != nil {
						mockApp.EXPECT().Get{{capitalize (trimS (cleanName .AppName))}}(gomock.Any(), gomock.Any()).Return(tc.mockReturns...).Times(1)
					}

				case handler.method == http.MethodPost && handler.url == "/{{(cleanName .AppName)}}":
					router.HandlerFunc(handler.method, handler.url, {{(cleanName .AppName)}}Controller.Create{{capitalize (trimS (cleanName .AppName))}}H)
					if tc.mockReturns != nil {
						mockApp.EXPECT().Create{{capitalize (trimS (cleanName .AppName))}}(gomock.Any(), gomock.Any()).Return(tc.mockReturns...).Times(1)
					}
				case handler.method == http.MethodPatch && handler.url == "/{{(cleanName .AppName)}}/:id":
					router.HandlerFunc(handler.method, handler.url, {{(cleanName .AppName)}}Controller.Patch{{capitalize (trimS (cleanName .AppName))}}H)
					if tc.mockReturns != nil {
						mockApp.EXPECT().Update{{capitalize (trimS (cleanName .AppName))}}(gomock.Any(), gomock.Any()).Return(tc.mockReturns...).Times(1)
					}

				case handler.method == http.MethodDelete && handler.url == "/{{(cleanName .AppName)}}/:id":
					router.HandlerFunc(handler.method, handler.url, {{(cleanName .AppName)}}Controller.Delete{{capitalize (trimS (cleanName .AppName))}}H)
					if tc.mockReturns != nil {
						mockApp.EXPECT().Delete{{capitalize (trimS (cleanName .AppName))}}(gomock.Any(), gomock.Any()).Return(tc.mockReturns...).Times(1)
					}
				}

				w := httptest.NewRecorder()
				r := createNewRequest(t, handler.method, tc.targetUrl, tc.body)

				router.ServeHTTP(w, r)

				gotStatus := w.Result().StatusCode
				assert.Equalf(t, tc.expectedStatus, gotStatus, "tc: '%s' | %s %s | want %d, got %d", tc.tcName, handler.method, tc.targetUrl, tc.expectedStatus, gotStatus)

				body, err := io.ReadAll(w.Result().Body)
				assert.Nil(t, err, "want nil")

				validateSchema(t, tc.schema, body)
			})
		}
	}
}

func Test{{capitalize (cleanName .AppName)}}ControllerAPIIntegration(t *testing.T) {
	t.Parallel()
	if !INTEGRATION_TESTS {
		t.Errorf("skipping tests | INTEGRATION_TESTS = '%v'", INTEGRATION_TESTS)
		t.FailNow()
	}

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	repo := sqlite3.NewRepository(dbConn, NewMockILogger(ctrl))
	{{(cleanName .AppName)}}App := application.New(rootApp, repo)
	{{(cleanName .AppName)}}Controller := rest.New{{capitalize (cleanName .AppName)}}Controller(rootApp, {{(cleanName .AppName)}}App)

	router := httprouter.New()
	router.HandlerFunc(http.MethodGet, "/{{(cleanName .AppName)}}", {{(cleanName .AppName)}}Controller.Find{{capitalize (cleanName .AppName)}}H)
	router.HandlerFunc(http.MethodPost, "/{{(cleanName .AppName)}}", {{(cleanName .AppName)}}Controller.Create{{capitalize (trimS (cleanName .AppName))}}H)
	router.HandlerFunc(http.MethodGet, "/{{(cleanName .AppName)}}/:id", {{(cleanName .AppName)}}Controller.Get{{capitalize (trimS (cleanName .AppName))}}H)
	router.HandlerFunc(http.MethodPatch, "/{{(cleanName .AppName)}}/:id", {{(cleanName .AppName)}}Controller.Patch{{capitalize (trimS (cleanName .AppName))}}H)
	router.HandlerFunc(http.MethodDelete, "/{{(cleanName .AppName)}}/:id", {{(cleanName .AppName)}}Controller.Delete{{capitalize (trimS (cleanName .AppName))}}H)

	// find {{(cleanName .AppName)}}
	rec := httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodGet, "/{{(cleanName .AppName)}}", nil))

	assert.Equal(t, http.StatusOK, rec.Result().StatusCode)
	validateSchema(t, find{{capitalize (cleanName .AppName)}}Schema200, getResponseBody(t, rec))

	// create invalid {{trimS (cleanName .AppName)}}
	rec = httptest.NewRecorder()
	req := createNewRequest(t, http.MethodPost, "/{{(cleanName .AppName)}}", createInvalid{{capitalize (trimS (cleanName .AppName))}}Bytes(t))
	router.ServeHTTP(rec, req)

	assert.Equal(t, http.StatusUnprocessableEntity, rec.Result().StatusCode)
	validateSchema(t, {{trimS (cleanName .AppName)}}Schema422, getResponseBody(t, rec))

	// create valid {{trimS (cleanName .AppName)}}
	rec = httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodPost, "/{{(cleanName .AppName)}}", createValid{{capitalize (trimS (cleanName .AppName))}}Bytes(t)))

	assert.Equal(t, http.StatusCreated, rec.Result().StatusCode)
	respBody := getResponseBody(t, rec)
	validateSchema(t, post{{capitalize (trimS (cleanName .AppName))}}Schema201, respBody)

	var cup *rest.Create{{capitalize (trimS (cleanName .AppName))}}Response
	assert.Nil(t, json.Unmarshal(respBody, &cup))

	// get the created {{trimS (cleanName .AppName)}}
	rec = httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodGet, fmt.Sprintf("/{{(cleanName .AppName)}}/%d", cup.{{capitalize (trimS (cleanName .AppName))}}ID), nil))

	assert.Equal(t, http.StatusOK, rec.Result().StatusCode)
	respBody = getResponseBody(t, rec)
	validateSchema(t, get{{capitalize (trimS (cleanName .AppName))}}Schema200, respBody)

	var created{{capitalize (trimS (cleanName .AppName))}} *rest.Get{{capitalize (trimS (cleanName .AppName))}}Response
	assert.Nil(t, json.Unmarshal(respBody, &created{{capitalize (trimS (cleanName .AppName))}}))

	// update {{trimS (cleanName .AppName)}}
	rec = httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodPatch, fmt.Sprintf("/{{(cleanName .AppName)}}/%d", created{{capitalize (trimS (cleanName .AppName))}}.{{capitalize (trimS (cleanName .AppName))}}.ID), createValid{{capitalize (trimS (cleanName .AppName))}}Bytes(t)))
	assert.Equal(t, http.StatusOK, rec.Result().StatusCode, fmt.Sprintf("/{{(cleanName .AppName)}}/%d", created{{capitalize (trimS (cleanName .AppName))}}.{{capitalize (trimS (cleanName .AppName))}}.ID), created{{capitalize (trimS (cleanName .AppName))}})
	validateSchema(t, patch{{capitalize (trimS (cleanName .AppName))}}Schema200, getResponseBody(t, rec))

	// verify the update
	rec = httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodGet, fmt.Sprintf("/{{(cleanName .AppName)}}/%d", created{{capitalize (trimS (cleanName .AppName))}}.{{capitalize (trimS (cleanName .AppName))}}.ID), nil))
	assert.Equal(t, http.StatusOK, rec.Result().StatusCode)
	respBody = getResponseBody(t, rec)
	validateSchema(t, get{{capitalize (trimS (cleanName .AppName))}}Schema200, respBody)

	var updated{{capitalize (trimS (cleanName .AppName))}} *rest.Get{{capitalize (trimS (cleanName .AppName))}}Response
	assert.Nil(t, json.Unmarshal(respBody, &updated{{capitalize (trimS (cleanName .AppName))}}))
	assert.NotEqual(t, "", cmp.Diff(created{{capitalize (trimS (cleanName .AppName))}}, updated{{capitalize (trimS (cleanName .AppName))}}))

	// delete the {{trimS (cleanName .AppName)}}
	rec = httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodDelete, fmt.Sprintf("/{{(cleanName .AppName)}}/%d", created{{capitalize (trimS (cleanName .AppName))}}.{{capitalize (trimS (cleanName .AppName))}}.ID), nil))
	assert.Equal(t, http.StatusOK, rec.Result().StatusCode)
	validateSchema(t, delete{{capitalize (trimS (cleanName .AppName))}}Schema200, getResponseBody(t, rec))

	// verify the delete
	rec = httptest.NewRecorder()
	router.ServeHTTP(rec, createNewRequest(t, http.MethodGet, fmt.Sprintf("/{{(cleanName .AppName)}}/%d", created{{capitalize (trimS (cleanName .AppName))}}.{{capitalize (trimS (cleanName .AppName))}}.ID), nil))
	assert.Equal(t, http.StatusNotFound, rec.Result().StatusCode)
	respBody = getResponseBody(t, rec)
	validateSchema(t, {{trimS (cleanName .AppName)}}Schema404, respBody)
}
