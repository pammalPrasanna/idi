package {{trimS .AppName}}s_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/xeipuuv/gojsonschema"
)

func validateSchema(t *testing.T, schema string, resp []byte) {
	t.Helper()

	schemaLoader := gojsonschema.NewStringLoader(schema)
	documentLoader := gojsonschema.NewBytesLoader(resp)

	result, err := gojsonschema.Validate(schemaLoader, documentLoader)
	assert.Nil(t, err)

	assert.Equalf(t, true, result.Valid(), "schema validation failed, got %s", string(resp))

	if !result.Valid() {
		for _, desc := range result.Errors() {
			t.Errorf("- %s\n", desc)
		}
	}
}



const delete{{capitalize (trimS .AppName)}}Schema200 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "patch{{capitalize (trimS .AppName)}}Schema200",
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "pattern": "deleted successfully"
    }
  },
  "required": [
    "message"
  ]
}`

const patch{{capitalize (trimS .AppName)}}Schema200 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "patch{{capitalize (trimS .AppName)}}Schema200",
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "pattern": "patched successfully"
    }
  },
  "required": [
    "message"
  ]
}`

const {{trimS .AppName}}Schema422 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{trimS .AppName}}Schema422",
  "type": "object",
  "properties": {
    "errors": {
      "type": "object",
      "properties": {
        "username": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
			{{if eq .AppName "users"}}
        ,"email": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
		{{end}}
      },
      "required": [
        "username",
        "password"
		{{if eq .AppName "users"}}
		,"email"
		{{end}}
      ]
    }
  },
  "required": [
    "errors"
  ]
}
`

const post{{capitalize (trimS .AppName)}}Schema201 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "post{{trimS .AppName}}Schema201",
  "type": "object",
  "properties": {
    "{{trimS .AppName}}_id": {
      "type": "number",
       "minimum": 1
    }
  },
  "required": [
    "{{trimS .AppName}}_id"
  ]
}
`

const {{trimS .AppName}}Schema400 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{trimS .AppName}}Schema400",
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "minLength": 1
    }
  },
  "required": [
    "error"
  ]
}
`

const {{trimS .AppName}}SchemaInvalidID422 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "schema422",
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "pattern": "invalid parameter: id"
    }
  },
  "required": [
    "error"
  ]
}
`

const {{trimS .AppName}}Schema404 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{trimS .AppName}}Schema404",
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "pattern": "The requested resource could not be found"
    }
  },
  "required": [
    "error"
  ]
}`

const get{{capitalize (trimS .AppName)}}Schema200 string = `{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "get{{capitalize (trimS .AppName)}}Schema200",
  "type": "object",
  "properties": {
    "{{trimS .AppName}}": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "username": {
          "type": "string"
        },
		{{if eq .AppName "users"}}
        "email": {
          "type": "string"
        },
		{{end}}
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "username",
			{{if eq .AppName "users"}}
        "email",
		{{end}}
        "created_at",
        "updated_at"
      ]
    }
  },
  "required": [
    "{{trimS .AppName}}"
  ]
}`

const {{trimS .AppName}}Schema500 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{trimS .AppName}}Schema500",
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "pattern": "The server encountered a problem and could not process your request"
    }
  },
  "required": [
    "error"
  ]
}`

const find{{capitalize .AppName}}Schema200 string = `
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "find{{capitalize .AppName}}Schema",
  "type": "object",
  "properties": {
    "{{trimS .AppName}}s": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "username": {
            "type": "string"
          },
		  	{{if eq .AppName "users"}}
          "email": {
            "type": "string"
          },
		  {{end}}
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
		  	{{if eq .AppName "users"}}
          "email",
		  {{end}}
          "created_at",
          "updated_at"
        ]
      }
    }
  },
  "required": [
    "{{trimS .AppName}}s"
  ]
}
`
