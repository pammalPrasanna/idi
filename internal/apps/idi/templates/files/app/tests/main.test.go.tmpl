package {{(cleanName .AppName)}}_test

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"os/exec"
	"testing"

	"{{.ProjectName}}/internal/lib"

	"github.com/joho/godotenv"
)

var (
	dbConn            *sql.DB
	rootApp           lib.IApp
	INTEGRATION_TESTS bool
)

const dbfile string = "testdb.db"

func setupTest(m *testing.M) (int, error) {
	if os.Getenv("INTEGRATION_TESTS") != "true" {
		INTEGRATION_TESTS = false
		fmt.Println("skipping database setup")
		return m.Run(), nil
	} else {
		INTEGRATION_TESTS = true
	}

	var err error

	conn, err := Sqlite3Test(dbfile)
	if err != nil {
		return -1, err
	}

	cmd := exec.Command("goose",
		"-s", "-dir=../../../../../migrations", "sqlite3", dbfile, "up",
	)
	if err := cmd.Run(); err != nil {
		log.Printf("unable to migrate up with error: %s", err)
	}

	ra, err := lib.Idi(lib.WithDBConn(conn))
	if err != nil {
		log.Printf("unable to create root app: %s", err)
		os.Exit(-1)
	}
	rootApp = ra
	dbConn = rootApp.Sqlite3()

	defer func() {
		if err := dbConn.Close(); err != nil {
			log.Printf("unable to close DB with error: '%s'", err)
		}
		if err := os.Remove(dbfile); err != nil {
			log.Printf("unable to delete testdb with error: %s", err)
		}
	}()

	return m.Run(), nil
}


func TestMain(m *testing.M) {
	godotenv.Load("../../../../../.env")

	code, err := setupTest(m)
	if err != nil {
		log.Printf("unable to create test db connection: %s", err)
	}
	os.Exit(code)
}
