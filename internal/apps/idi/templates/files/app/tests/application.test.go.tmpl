package {{(cleanName .AppName)}}_test

import (
	"context"
	"fmt"
	{{if eq (cleanName .AppName) "users"}}
	"regexp"
	{{end}}
	"testing"
	"time"

	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/adapters/sqlite3"
	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/application"

	{{if eq (cleanName .AppName) "users"}}
	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/application/domain"
	{{end}}
	"{{.ProjectName}}/internal/dtos"
	"{{.ProjectName}}/internal/lib"

	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

// boundry value analysis test
type bvat struct {
	tcDesc      string
	errMsg      string
	length      int
	allowLength bool
}

{{if eq (cleanName .AppName) "users"}}
func createPasswordTests(t *testing.T) []bvat {
	t.Helper()

	tests := []bvat{
		{
			tcDesc:      "invalid password of length 7",
			errMsg:      "password should be minimum 8 characters",
			length:      7,
			allowLength: false,
		},
		{
			tcDesc:      "valid password of length 8",
			errMsg:      "",
			length:      8,
			allowLength: true,
		},
		{
			tcDesc:      "valid password of length 9",
			errMsg:      "",
			length:      9,
			allowLength: true,
		},
		{
			tcDesc:      "valid password of length 63",
			errMsg:      "",
			length:      63,
			allowLength: true,
		},
		{
			tcDesc:      "valid password of length 64",
			errMsg:      "",
			length:      64,
			allowLength: true,
		},
		{
			tcDesc:      "invalid password of length 65",
			errMsg:      "password should be maximum 64 characters",
			length:      65,
			allowLength: false,
		},
	}
	return tests
}
{{end}}
func createUsernameTests(t *testing.T) []bvat {
	t.Helper()

	tests := []bvat{
		{
			tcDesc:      "invalid username of length 1",
			errMsg:      "username should be minimum 2 characters",
			length:      1,
			allowLength: false,
		},
		{
			tcDesc:      "valid username of length 2",
			errMsg:      "",
			length:      2,
			allowLength: true,
		},
		{
			tcDesc:      "valid username of length 3",
			errMsg:      "",
			length:      3,
			allowLength: true,
		},
		{
			tcDesc:      "valid username of length 63",
			errMsg:      "",
			length:      63,
			allowLength: true,
		},
		{
			tcDesc:      "valid username of length 64",
			errMsg:      "",
			length:      64,
			allowLength: true,
		},
		{
			tcDesc:      "invalid username of length 65",
			errMsg:      "username should be maximum 64 characters",
			length:      65,
			allowLength: false,
		},
	}
	return tests
}


func Test{{capitalize (cleanName .AppName)}}Domain(t *testing.T) {
	t.Parallel()

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockI{{capitalize (cleanName .AppName)}}Repository(ctrl)
	{{(cleanName .AppName)}}App := application.New(rootApp, mockRepo)
	mockRepo.EXPECT().Create{{capitalize (trimS (cleanName .AppName))}}(gomock.Any(), gomock.Any()).Return(int64(1), nil).AnyTimes()

	for _, v := range createUsernameTests(t) {
		t.Run(fmt.Sprintf("-- failed to create {{trimS (cleanName .AppName)}} with - %s", v.tcDesc), func(t *testing.T) {
			t.Parallel()
			ctx, cancel := context.WithTimeout(context.Background(), time.Second*1)
			defer cancel()

			{{trimS (cleanName .AppName)}} := createValid{{capitalize (trimS (cleanName .AppName))}}(t)
			{{trimS (cleanName .AppName)}}.Username = randString(v.length)

			id, err := {{(cleanName .AppName)}}App.Create{{capitalize (trimS (cleanName .AppName))}}(ctx, {{trimS (cleanName .AppName)}})

			if !v.allowLength {

				assert.Negativef(t, id, "want -1 got %d", id)
				assert.ErrorAsf(t, err, &lib.ErrInvalidData{}, "want ErrInvalidData, got %v", err)

				e := err.(lib.ErrInvalidData).GetErrors()

				errList, ok := e["username"]
				assert.Equal(t, true, ok)
				assert.Greaterf(t, len(errList), 0, "want length > 0, got %d")

				assert.Equal(t, v.errMsg, errList[0])

			} else {
				assert.Nilf(t, err, "want nil, got '%v'", err)
				assert.Equal(t, int64(1), id)
			}
		})
	}
{{if eq (cleanName .AppName) "users"}}
	t.Run("-- failed to create {{trimS (cleanName .AppName)}} with invalid email", func(t *testing.T) {
		t.Parallel()
		ctx, cancel := context.WithTimeout(context.Background(), time.Second*1)
		defer cancel()

		{{trimS (cleanName .AppName)}} := createValid{{capitalize (trimS (cleanName .AppName))}}(t)
		{{trimS (cleanName .AppName)}}.Email = "invalidEmail"

		id, err := {{(cleanName .AppName)}}App.Create{{capitalize (trimS (cleanName .AppName))}}(ctx, {{trimS (cleanName .AppName)}})

		assert.Negativef(t, id, "want -1 got %d", id)
		assert.ErrorAsf(t, err, &lib.ErrInvalidData{}, "want ErrInvalidData, got %v", err)

		e := err.(lib.ErrInvalidData).GetErrors()

		errList, ok := e["email"]
		assert.Equal(t, true, ok)
		assert.Greaterf(t, len(errList), 0, "want length > 0, got %d")

		assert.Equal(t, "invalid email", errList[0])
	})

	for _, v := range createPasswordTests(t) {
		t.Run(fmt.Sprintf("-- failed to create {{trimS (cleanName .AppName)}} with - %s", v.tcDesc), func(t *testing.T) {
			t.Parallel()
			ctx, cancel := context.WithTimeout(context.Background(), time.Second*1)
			defer cancel()

			{{trimS (cleanName .AppName)}} := createValid{{capitalize (trimS (cleanName .AppName))}}(t)
			{{trimS (cleanName .AppName)}}.Password = randString(v.length)

			id, err := {{(cleanName .AppName)}}App.Create{{capitalize (trimS (cleanName .AppName))}}(ctx, {{trimS (cleanName .AppName)}})

			if !v.allowLength {
				assert.Negativef(t, id, "want -1 got %d", id)
				assert.ErrorAsf(t, err, &lib.ErrInvalidData{}, "want ErrInvalidData, got %v", err)

				e := err.(lib.ErrInvalidData).GetErrors()

				errList, ok := e["password"]
				assert.Equal(t, true, ok)
				assert.Greaterf(t, len(errList), 0, "want length > 0, got %d")

				assert.Equal(t, v.errMsg, errList[0])
			} else {
				assert.Nilf(t, err, "want nil, got '%v'", err)
				assert.Equal(t, int64(1), id)
			}
		})
	}
{{end}}
}

{{if eq (cleanName .AppName) "users"}}
func TestEmail(t *testing.T) {

	invalidEmail:= "gAYhYemail.com"
	validEmail:="gAYhY@email.com"

	v := lib.NewValidator()
	domain.IsValidEmail(v, invalidEmail)
	err := v.Errors().(lib.ErrInvalidData).GetErrors()
	assert.Equal(t, 1, len(err))

	var emailRx = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

	assert.False(t, emailRx.MatchString(invalidEmail))
	assert.True(t, emailRx.MatchString(validEmail))

}
{{end}}

func Test{{capitalize (cleanName .AppName)}}Application(t *testing.T) {
	t.Parallel()
	if !INTEGRATION_TESTS {
		t.Errorf("skipping tests | INTEGRATION_TESTS = '%v'", INTEGRATION_TESTS)
		t.FailNow()
	}
	assert.NotNil(t, dbConn, "dbConn is nil")

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockLogger := NewMockILogger(ctrl)
	repo := sqlite3.NewRepository(dbConn, mockLogger)
	{{(cleanName .AppName)}}App := application.New(rootApp, repo)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
	defer cancel()

	// create {{trimS (cleanName .AppName)}}
	tu := createValid{{capitalize (trimS (cleanName .AppName))}}(t)
	id, err := {{(cleanName .AppName)}}App.Create{{capitalize (trimS (cleanName .AppName))}}(ctx, tu)
	assert.Nil(t, err)
	assert.GreaterOrEqual(t, id, int64(1))

	// get all {{trimS (cleanName .AppName)}}
	{{trimS (cleanName .AppName)}}, err := {{(cleanName .AppName)}}App.Find{{capitalize (cleanName .AppName)}}(ctx, &dtos.Find{{capitalize (cleanName .AppName)}}Params{})
	assert.Nil(t, err)
	assert.NotNil(t, {{trimS (cleanName .AppName)}})
	assert.GreaterOrEqual(t, len({{trimS (cleanName .AppName)}}), 0)

	// get created  {{trimS (cleanName .AppName)}}
	got{{capitalize (trimS (cleanName .AppName))}}1, err := {{(cleanName .AppName)}}App.Get{{capitalize (trimS (cleanName .AppName))}}(ctx, &dtos.Get{{capitalize (trimS (cleanName .AppName))}}Params{ID: id})
	assert.Nil(t, err)
	assert.NotNil(t, got{{capitalize (trimS (cleanName .AppName))}}1)

	// update {{trimS (cleanName .AppName)}}'s username
	updated{{capitalize (trimS (cleanName .AppName))}}1 := &dtos.Update{{capitalize (trimS (cleanName .AppName))}}Params{
		ID:       id,
		Username: addrOfStr(randString(6)),
	}
	err = {{(cleanName .AppName)}}App.Update{{capitalize (trimS (cleanName .AppName))}}(ctx, updated{{capitalize (trimS (cleanName .AppName))}}1)
	assert.Nil(t, err)

	// verify update username
	got{{capitalize (trimS (cleanName .AppName))}}2, err := {{(cleanName .AppName)}}App.Get{{capitalize (trimS (cleanName .AppName))}}(ctx, &dtos.Get{{capitalize (trimS (cleanName .AppName))}}Params{ID: id})
	assert.Nil(t, err)
	assert.NotNil(t, got{{capitalize (trimS (cleanName .AppName))}}2)
	assert.Equal(t, *updated{{capitalize (trimS (cleanName .AppName))}}1.Username, got{{capitalize (trimS (cleanName .AppName))}}2.Username)

	{{if eq (cleanName .AppName) "users"}}
	// update {{trimS (cleanName .AppName)}}'s email
	updated{{capitalize (trimS (cleanName .AppName))}}2 := &dtos.Update{{capitalize (trimS (cleanName .AppName))}}Params{
		ID:    id,
		Email: addrOfStr(randomEmail()),
	}
	err = {{(cleanName .AppName)}}App.Update{{capitalize (trimS (cleanName .AppName))}}(ctx, updated{{capitalize (trimS (cleanName .AppName))}}2)
	assert.Nil(t, err)

	// verify update email
	got{{capitalize (trimS (cleanName .AppName))}}3, err := {{(cleanName .AppName)}}App.Get{{capitalize (trimS (cleanName .AppName))}}(ctx, &dtos.Get{{capitalize (trimS (cleanName .AppName))}}Params{ID: id})
	assert.Nil(t, err)
	assert.NotNil(t, got{{capitalize (trimS (cleanName .AppName))}}3)
	assert.Equal(t, *updated{{capitalize (trimS (cleanName .AppName))}}2.Email, got{{capitalize (trimS (cleanName .AppName))}}3.Email)
	{{end}}

	// delete the {{trimS (cleanName .AppName)}}
	err = {{(cleanName .AppName)}}App.Delete{{capitalize (trimS (cleanName .AppName))}}(ctx, &dtos.Delete{{capitalize (trimS (cleanName .AppName))}}Params{
		ID: got{{capitalize (trimS (cleanName .AppName))}}3.ID,
	})
	assert.Nil(t, err)
}
