package sqlite3

import (
	"context"
	"database/sql"
	"errors"
	"strings"
	"time"

	"{{.ProjectName}}/internal/apps/{{.AppName}}/internal/application/ports"
	"{{.ProjectName}}/internal/dtos"
	"{{.ProjectName}}/internal/lib"
)

type Sqlite3Repository struct {
	db     *sql.DB
	logger lib.ILogger
}

var _ ports.I{{capitalize .AppName}}Repository = (*Sqlite3Repository)(nil)

func NewRepository(db *sql.DB, logger lib.ILogger) *Sqlite3Repository {
	return &Sqlite3Repository{
		db,
		logger,
	}
}

const get{{capitalize (trimS .AppName)}}Stmt = `
SELECT
	id,
	username,
	email,
	hashed_password,
	created_at,
	updated_at
FROM
	{{.AppName}}
WHERE
	id = ?
LIMIT
	1
`

func (t *Sqlite3Repository) Get{{capitalize (trimS .AppName)}}(ctx context.Context, arg *dtos.Get{{capitalize (trimS .AppName)}}Params) ({{trimS .AppName}} *dtos.{{capitalize (trimS .AppName)}}, err error) {
	if arg.ID <= 0 {
		return nil, lib.ErrNoRecord
	}
	row := t.db.QueryRowContext(ctx, get{{capitalize (trimS .AppName)}}Stmt, arg.ID)
	{{trimS .AppName}} = &dtos.{{capitalize (trimS .AppName)}}{}
	err = row.Scan(
		&{{trimS .AppName}}.ID,
		&{{trimS .AppName}}.Username,
		&{{trimS .AppName}}.Email,
		&{{trimS .AppName}}.HashedPassword,
		&{{trimS .AppName}}.CreatedAt,
		&{{trimS .AppName}}.UpdatedAt,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, lib.ErrNoRecord

		default:
			return nil, err
		}
	}
	return {{trimS .AppName}}, nil
}

{{if eq .AppName "users"}}
const get{{capitalize (trimS .AppName)}}ByEmailStmt = `
SELECT
	id,
	{{trimS .AppName}}name,
	email,
	hashed_password,
	created_at,
	updated_at
FROM
	{{.AppName}}
WHERE
	email = ?
LIMIT
	1
`

func (t *Sqlite3Repository) Get{{capitalize (trimS .AppName)}}ByEmail(ctx context.Context, arg *dtos.Get{{capitalize (trimS .AppName)}}Params) ({{trimS .AppName}} *dtos.{{capitalize (trimS .AppName)}}, err error) {
	if arg.Email == "" {
		return nil, lib.ErrNoRecord
	}
	row := t.db.QueryRowContext(ctx, get{{capitalize (trimS .AppName)}}ByEmailStmt, arg.Email)
	{{trimS .AppName}} = &dtos.{{capitalize (trimS .AppName)}}{}
	err = row.Scan(
		&{{trimS .AppName}}.ID,
		&{{trimS .AppName}}.Username,
		&{{trimS .AppName}}.Email,
		&{{trimS .AppName}}.HashedPassword,
		&{{trimS .AppName}}.CreatedAt,
		&{{trimS .AppName}}.UpdatedAt,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, lib.ErrNoRecord

		default:
			return nil, err
		}
	}
	return {{trimS .AppName}}, nil
}
{{end}}

const list{{capitalize .AppName}}Stmt = `
SELECT
	id,
	{{trimS .AppName}}name,
	email,
	created_at,
	updated_at
FROM
	{{.AppName}}
`

func (t *Sqlite3Repository) Find{{capitalize .AppName}}(ctx context.Context, arg *dtos.Find{{capitalize .AppName}}Params) ({{.AppName}} []*dtos.{{capitalize (trimS .AppName)}}, err error) {
	rows, err := t.db.QueryContext(ctx, list{{capitalize .AppName}}Stmt)
	if err != nil {
		t.logger.Error("unable to query rows", "Find{{capitalize .AppName}}", err)
		return nil, err
	}
	defer func() {
		rowsErr := rows.Close()
		if rowsErr != nil {

			t.logger.Error("unable to close rows", "Find{{capitalize .AppName}}", rowsErr)
			err = errors.Join(err, rowsErr)
		}
	}()

	{{.AppName}} = []*dtos.{{capitalize (trimS .AppName)}}{}
	for rows.Next() {
		{{trimS .AppName}} := &dtos.{{capitalize (trimS .AppName)}}{}
		if rowErr := rows.Scan(
			&{{trimS .AppName}}.ID,
			&{{trimS .AppName}}.Username,
			&{{trimS .AppName}}.Email,
			&{{trimS .AppName}}.CreatedAt,
			&{{trimS .AppName}}.UpdatedAt,
		); rowErr != nil {
			t.logger.Error("rows Scan() got errors", "Find{{.AppName}}", rowErr)
			err = errors.Join(err, rowErr)
			return nil, err
		}
		{{.AppName}} = append({{.AppName}}, {{trimS .AppName}})
	}
	return {{.AppName}}, err
}

const create{{capitalize (trimS .AppName)}}Stmt = `INSERT INTO
	{{.AppName}} ({{trimS .AppName}}name, email, hashed_password)
VALUES
	(?, ?, ?) RETURNING id`

func (t *Sqlite3Repository) Create{{capitalize (trimS .AppName)}}(ctx context.Context, arg *dtos.Create{{capitalize (trimS .AppName)}}Params) (id int64, err error) {
	row := t.db.QueryRowContext(ctx, create{{capitalize (trimS .AppName)}}Stmt, arg.Username, arg.Email, arg.Password)
	err = row.Scan(&id)
	if err != nil {
		switch {
		case strings.Contains(err.Error(), "UNIQUE"):
			return -1, lib.ErrNotUnique{
				Msg: err.Error(),
			}

		default:
			return -1, err
		}
	}
	return id, err
}

const update{{capitalize (trimS .AppName)}}Stmt = `
UPDATE
	{{.AppName}}
set
	{{trimS .AppName}}name = ?,
	email = ?,
	updated_at = ?
WHERE
	id = ?
`

func (t *Sqlite3Repository) Update{{capitalize (trimS .AppName)}}(ctx context.Context, arg *dtos.Update{{capitalize (trimS .AppName)}}Params) error {
	if arg.ID <= 0 {
		return lib.ErrNoRecord
	}
	_, err := t.db.ExecContext(ctx, update{{capitalize (trimS .AppName)}}Stmt, *arg.Username, *arg.Email, lib.ITime(time.Now()).Time(), arg.ID)
	return err
}

const delete{{capitalize (trimS .AppName)}}Stmt = `
DELETE FROM
	{{.AppName}}
WHERE
	id = ?
`

func (t *Sqlite3Repository) Delete{{capitalize (trimS .AppName)}}(ctx context.Context, arg *dtos.Delete{{capitalize (trimS .AppName)}}Params) error {
	if arg.ID <= 0 {
		return lib.ErrNoRecord
	}
	_, err := t.db.ExecContext(ctx, delete{{capitalize (trimS .AppName)}}Stmt, arg.ID)
	return err
}
