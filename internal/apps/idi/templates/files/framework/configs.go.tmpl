package lib

import (
	"os"
	"strconv"
	"time"

	_ "github.com/joho/godotenv/autoload"
)

type config struct {
	port            int
	env             string
	baseURL         string
	jwtSecret       string
	symmetricKey    string
	tokenExpiration time.Duration
}

// type default

const (
	defaultPort            int           = 4200
	defaultENV             string        = "development"
	defaultBaseURL         string        = "http://localhost:4200"
	defaultJWTSecret       string        = "762898e6b788045334ab11d18e3a9c21e4d91d0399a767f636b78172a72324cc"
	defaultSymmetricKey    string        = "e4d91d0399a767f636b78172a72324cc"
	defaultTokenExpiration time.Duration = time.Hour
)

var (
	port            = os.Getenv("PORT")
	env             = os.Getenv("ENVIRONMENT")
	baseURL         = os.Getenv("BASE_URL")
	jwtSecret       = os.Getenv("JWT_SECRET")
	symmetricKey    = os.Getenv("SYMMETRIC_KEY")
	tokenExpiration = os.Getenv("TOKEN_EXPIRATION")
)

func configure() (cfg *config, err error) {
	cfg = &config{
		port:            defaultPort,
		env:             defaultENV,
		baseURL:         defaultBaseURL,
		jwtSecret:       defaultJWTSecret,
		symmetricKey:    defaultSymmetricKey,
		tokenExpiration: defaultTokenExpiration,
	}
	if port != "" {
		if i, err := strconv.Atoi(port); err != nil {
			cfg.port = i
		} else {
			return nil, err
		}
	}

	if env != "" {
		cfg.env = env
	}

	if baseURL != "" {
		cfg.baseURL = baseURL
	}

	if jwtSecret != "" {
		cfg.jwtSecret = jwtSecret
	}

	if symmetricKey != "" {
		cfg.symmetricKey = symmetricKey
	}

	if tokenExpiration != "" {
		if i, err := strconv.Atoi(tokenExpiration); err != nil {
			cfg.tokenExpiration = time.Duration(i) * time.Hour
		} else {
			return nil, err
		}
	}

	return cfg, nil
}