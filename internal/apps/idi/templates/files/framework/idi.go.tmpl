package lib

import (
	"database/sql"
	"errors"
	"net/http"
	"time"

	infra "{{.ProjectName}}/internal/infrastructure"
	{{if .IsAuth}}
	"{{.ProjectName}}/internal/lib/auth"
	{{end}}
	"github.com/julienschmidt/httprouter"
)

type (
	option func(*idi) error

	{{.Alias}} struct {
		*config

		// rest.go
		logger *slogLogger

		// server.go
		router *httprouter.Router
		server *http.Server


		{{.DBName}} *sql.DB

		// auth
		customGetUserByID func(id int) (*IUser, error)
		{{if .IsAuth}}auth.IAuth{{end}}
	}
)

var (
	_ IApp = (*{{.Alias}})(nil)
	_{{.Alias}} *{{.Alias}}
)

func {{capitalize .Alias}}(opts ...option) (*{{.Alias}}, error) {
	if _{{.Alias}} != nil {
		return _{{.Alias}}, nil
	}

	_{{.Alias}} = &{{.Alias}}{}

	cfg, err := configure()
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.config = cfg

	_{{.Alias}}.logger = newLogger(nil)
	_{{.Alias}}.router = httprouter.New()


	for _, opt := range opts {
		err := opt(_idi)
		if err != nil {
			return nil, err
		}
	}
{{if (ne .DBName "")}}
	// open DB connection(s) if not set WithDBConn
	if _idi.{{.DBName}} == nil {
		conn, err := infra.{{capitalize .DBName}}()
		if err != nil {
			return nil, err
		}
		_{{.Alias}}.{{.DBName}} = conn
	}
{{end}}
{{if .IsAuth}}
	{{if .IsPaseto}}
	paseto, err := auth.NewPasetoMaker(_{{.Alias}}.tokenExpiration, _{{.Alias}}.symmetricKey, _{{.Alias}}.baseURL)
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.IAuth = paseto
	{{else}}
	jwt, err := auth.NewJWTMaker(_{{.Alias}}.tokenExpiration, _{{.Alias}}.jwtSecret, _{{.Alias}}.baseURL)
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.IAuth = jwt
	{{end}}
{{end}}
	server, err := newServer(_{{.Alias}}.port, _{{.Alias}}.router, _{{.Alias}}.logger)
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.server = server

	// global middlewares
	server.Handler = _{{.Alias}}.recoverPanicM(server.Handler)
	server.Handler = _{{.Alias}}.loggerM(server.Handler)
	server.Handler = _{{.Alias}}.corsM(server.Handler)

	// static config
	fileServer := http.FileServer(http.Dir("./ui/static/"))
	_{{.Alias}}.router.Handler(http.MethodGet, "/static/*filepath", http.StripPrefix("/static", fileServer))

	return _{{.Alias}}, nil
}

func WithDBConn(dbConn *sql.DB) option {
	return func(i *idi) error {
		if dbConn == nil {
			return errors.New("database connection cannot be nil")
		}
		i.sqlite3 = dbConn
		return nil
	}
}

{{if (ne .DBName "")}}
func (i *{{.Alias}}) {{capitalize .DBName}}() *sql.DB {
	return i.{{.DBName}}
}
{{end}}

func (i *{{.Alias}}) Mux() *httprouter.Router {
	return i.router
}

func (i *{{.Alias}}) Logger() ILogger {
	return i.logger
}

func (i *{{.Alias}}) GetUserById(id int) (*IUser, error) {
	if i.customGetUserByID == nil {
		i.logger.Warn("unimplemented method: GetUserById")
		return &IUser{ID: 2}, nil
	} else {
		return i.customGetUserByID(id)
	}
}

func (i *{{.Alias}}) ContextTime() time.Duration {
	return i.contextTimeout
}
