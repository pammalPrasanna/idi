package lib

import (
	"database/sql"
	"net/http"
	"time"

	infra "{{.ProjectName}}/internal/infrastructure"
	{{if .IsAuth}}
	"{{.ProjectName}}/internal/lib/auth"
	{{end}}
	"github.com/julienschmidt/httprouter"
)

type {{.Alias}} struct {
	*config

	// rest.go
	logger ILogger

	// server.go
	router *httprouter.Router
	server *http.Server


	{{.DBName}} *sql.DB

	// auth
	customGetUserByID func(id int) (*IUser, error)
	{{if .IsAuth}}auth.IAuth{{end}}
}

var _ IApp = (*{{.Alias}})(nil)

func {{capitalize .Alias}}() (*{{.Alias}}, error) {
	{{.Alias}} := &{{.Alias}}{}

	cfg, err := configure()
	if err != nil {
		return nil, err
	}
	{{.Alias}}.config = cfg

	{{.Alias}}.logger = newLogger(nil)
	{{.Alias}}.router = httprouter.New()

	// open DB connection(s)
	conn, err := infra.{{capitalize .DBName}}()
	if err != nil {
		return nil, err
	}
	{{.Alias}}.{{.DBName}} = conn

{{if .IsAuth}}
	{{if .IsPaseto}}
	paseto, err := auth.NewPasetoMaker({{.Alias}}.tokenExpiration, {{.Alias}}.symmetricKey, {{.Alias}}.baseURL)
	if err != nil {
		return nil, err
	}
	{{.Alias}}.IAuth = paseto
	{{else}}
	jwt, err := auth.NewJWTMaker({{.Alias}}.tokenExpiration, {{.Alias}}.jwtSecret, {{.Alias}}.baseURL)
	if err != nil {
		return nil, err
	}
	{{.Alias}}.IAuth = jwt
	{{end}}
{{end}}
	server, err := newServer({{.Alias}}.port, {{.Alias}}.router, {{.Alias}}.logger)
	if err != nil {
		return nil, err
	}
	{{.Alias}}.server = server

	// global middlewares
{{if .IsAuth}}server.Handler = {{.Alias}}.authenticateM(server.Handler){{end}}
	server.Handler = {{.Alias}}.recoverPanicM(server.Handler)
	server.Handler = {{.Alias}}.loggerM(server.Handler)
	server.Handler = {{.Alias}}.corsM(server.Handler)

	// static config
	fileServer := http.FileServer(http.Dir("./ui/static/"))
	{{.Alias}}.router.Handler(http.MethodGet, "/static/*filepath", http.StripPrefix("/static", fileServer))

	return {{.Alias}}, nil
}

func (i *{{.Alias}}) {{capitalize .DBName}}() *sql.DB {
	return i.{{.DBName}}
}

func (i *{{.Alias}}) Mux() *httprouter.Router {
	return i.router
}

func (i *{{.Alias}}) Logger() ILogger {
	return i.logger
}

func (i *{{.Alias}}) GetUserById(id int) (*IUser, error) {
	if i.customGetUserByID == nil {
		i.logger.Warn("unimplemented method: GetUserById")
		return &IUser{ID: 2}, nil
	} else {
		return i.customGetUserByID(id)
	}
}

func (i *{{.Alias}}) ContextTime() time.Duration {
	return i.contextTimeout
}
