package lib

import (
	{{if ne .DBName ""}}"database/sql"{{end}}
	"net/http"
	"time"

	
	{{if ne .DBName ""}}infra "{{.ProjectName}}/internal/infrastructure"{{end}}
	{{if .IsAuth}}
	"{{.ProjectName}}/internal/lib/auth"
	{{end}}
	"github.com/julienschmidt/httprouter"
)

type {{.Alias}} struct {
	*config

	// rest.go
	logger *slogLogger

	// server.go
	router *httprouter.Router
	server *http.Server

	{{if ne .DBName ""}}
	{{.DBName}} *sql.DB
	{{end}}
	// auth
	customGetUserByID func(id int) (*IUser, error)
	{{if .IsAuth}}auth.IAuth{{end}}
}

var (
	_ IApp = (*{{.Alias}})(nil)
	_{{.Alias}} *{{.Alias}}
)

func New{{capitalize .Alias}}() (*{{.Alias}}, error) {
	if _{{.Alias}} != nil {
		return _{{.Alias}}, nil
	}

	_{{.Alias}} = &{{.Alias}}{}

	cfg, err := configure()
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.config = cfg

	_{{.Alias}}.logger = newLogger(nil)
	_{{.Alias}}.router = httprouter.New()

{{if ne .DBName ""}}
	// open DB connection(s)
	conn, err := infra.{{capitalize .DBName}}()
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.{{.DBName}} = conn
{{end}}

{{if .IsAuth}}
	{{if .IsPaseto}}
	paseto, err := auth.NewPasetoMaker(_{{.Alias}}.tokenExpiration, _{{.Alias}}.symmetricKey, _{{.Alias}}.baseURL)
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.IAuth = paseto
	{{else}}
	jwt, err := auth.NewJWTMaker(_{{.Alias}}.tokenExpiration, _{{.Alias}}.jwtSecret, _{{.Alias}}.baseURL)
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.IAuth = jwt
	{{end}}
{{end}}
	server, err := newServer(_{{.Alias}}.port, _{{.Alias}}.router, _{{.Alias}}.logger)
	if err != nil {
		return nil, err
	}
	_{{.Alias}}.server = server

	// global middlewares
	server.Handler = _{{.Alias}}.recoverPanicM(server.Handler)
	server.Handler = _{{.Alias}}.loggerM(server.Handler)
	server.Handler = _{{.Alias}}.corsM(server.Handler)

	// static config
	fileServer := http.FileServer(http.Dir("./ui/static/"))
	_{{.Alias}}.router.Handler(http.MethodGet, "/static/*filepath", http.StripPrefix("/static", fileServer))

	return _{{.Alias}}, nil
}

func (i *{{.Alias}}) Mux() *httprouter.Router {
	return i.router
}

func (i *{{.Alias}}) Logger() ILogger {
	return i.logger
}

func (i *{{.Alias}}) GetUserById(id int) (*IUser, error) {
	if i.customGetUserByID == nil {
		i.logger.Warn("unimplemented method: GetUserById")
		return &IUser{ID: 2}, nil
	} else {
		return i.customGetUserByID(id)
	}
}

func (i *{{.Alias}}) ContextTime() time.Duration {
	return i.contextTimeout
}

{{if ne .DBName ""}}
func (i *{{.Alias}}) {{capitalize .DBName}}() *sql.DB {
	return i.{{.DBName}}
}

func (i *Idi) TearDownDB() error {
	return i.{{.DBName}}.Close()
}
{{end}}