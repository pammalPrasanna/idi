package idi

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"strconv"

	// "reflect"
	// "runtime"
	"syscall"
	"time"

	_ "github.com/joho/godotenv/autoload"
	"github.com/julienschmidt/httprouter"
)

const (
	defaultIdleTimeout  = time.Minute
	defaultReadTimeout  = 5 * time.Second
	defaultWriteTimeout = 10 * time.Second
)

var (
	idleTimeout           = os.Getenv("SERVER_IDLE_TIMEOUT")
	readTimeout           = os.Getenv("SERVER_READ_TIMEOUT")
	writeTimeout          = os.Getenv("SERVER_WRITE_TIMEOUT")
	shutdownPeriod        = os.Getenv("SERVER_GRACEFUL_SHUTDOWN_PERIOD")
	defaultShutdownPeriod = 30 * time.Second
)

type Server struct {
	Mux    *httprouter.Router
	server *http.Server
	logger ILogger
	addr   string
}

var server *Server

func NewServer(port int, logger ILogger) (*Server, error) {
	if server == nil {
		server = &Server{}

		server.Mux = httprouter.New()
		server.logger = logger
		server.configureStatic()

		server.addr = fmt.Sprintf("localhost:%d", port)
		server.server = &http.Server{
			Addr:         server.addr,
			Handler:      server.Mux,
			IdleTimeout:  defaultIdleTimeout,
			ReadTimeout:  defaultReadTimeout,
			WriteTimeout: defaultWriteTimeout,
		}

		if idleTimeout != "" {
			if i, err := strconv.Atoi(idleTimeout); err != nil {
				server.server.IdleTimeout = time.Duration(i * int(time.Minute))
			} else {
				return nil, err
			}
		}

		if readTimeout != "" {
			if i, err := strconv.Atoi(readTimeout); err != nil {
				server.server.ReadTimeout = time.Duration(i * int(time.Second))
			} else {
				return nil, err
			}
		}

		if writeTimeout != "" {
			if i, err := strconv.Atoi(writeTimeout); err != nil {
				server.server.WriteTimeout = time.Duration(i * int(time.Second))
			} else {
				return nil, err
			}
		}

		if shutdownPeriod != "" {
			if i, err := strconv.Atoi(shutdownPeriod); err != nil {
				defaultShutdownPeriod = time.Duration(i * int(time.Second))
			} else {
				return nil, err
			}
		}

	}
	return server, nil
}

func (s *Server) ServeHTTP() error {
	// graceful shutdown
	done := make(chan bool, 1)
	go s.gracefulShutdown(done)

	s.logger.Info("server started at " + s.addr)

	return s.server.ListenAndServe()
}

func (s *Server) configureStatic() {
	fileServer := http.FileServer(http.Dir("./ui/static/"))
	s.Mux.Handler(http.MethodGet, "/static/*filepath", http.StripPrefix("/static", fileServer))
}

func (s *Server) WrapIt(middlewares ...func(next http.Handler) http.Handler) {
	for _, m := range middlewares {
		// fmt.Println(runtime.FuncForPC(reflect.ValueOf(m).Pointer()).Name())
		s.server.Handler = m(s.server.Handler)
	}
}

func (s *Server) gracefulShutdown(done chan bool) {
	// Create context that listens for the interrupt signal from the OS.
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	// Listen for the interrupt signal.
	<-ctx.Done()

	s.logger.Info("shutting down gracefully, press Ctrl+C again to force")

	// The context is used to inform the server it has 5 seconds to finish
	// the request it is currently handling
	ctx, cancel := context.WithTimeout(context.Background(), defaultShutdownPeriod)
	defer cancel()
	if err := s.server.Shutdown(ctx); err != nil {
		s.logger.Warn("Server forced to shutdown with error: %v", err)
	}

	s.logger.Warn("Server exiting")

	// Notify the main goroutine that the shutdown is complete
	done <- true
}
