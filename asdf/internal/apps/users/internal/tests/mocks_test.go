// Code generated by MockGen. DO NOT EDIT.
// Source: .\generate_test.go

// Package users_test is a generated GoMock package.
package users_test

import (
	dtos "asdf/internal/dtos"
	lib "asdf/internal/lib"
	auth "asdf/internal/lib/auth"
	context "context"
	sql "database/sql"
	slog "log/slog"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	httprouter "github.com/julienschmidt/httprouter"
)

// MockIUsers is a mock of IUsers interface.
type MockIUsers struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersMockRecorder
}

// MockIUsersMockRecorder is the mock recorder for MockIUsers.
type MockIUsersMockRecorder struct {
	mock *MockIUsers
}

// NewMockIUsers creates a new mock instance.
func NewMockIUsers(ctrl *gomock.Controller) *MockIUsers {
	mock := &MockIUsers{ctrl: ctrl}
	mock.recorder = &MockIUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsers) EXPECT() *MockIUsersMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUsers) CreateUser(ctx context.Context, arg *dtos.CreateUserParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUsersMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUsers)(nil).CreateUser), ctx, arg)
}

// DeleteUser mocks base method.
func (m *MockIUsers) DeleteUser(ctx context.Context, arg *dtos.DeleteUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUsersMockRecorder) DeleteUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUsers)(nil).DeleteUser), ctx, arg)
}

// FindUsers mocks base method.
func (m *MockIUsers) FindUsers(ctx context.Context, arg *dtos.FindUsersParams) ([]*dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", ctx, arg)
	ret0, _ := ret[0].([]*dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockIUsersMockRecorder) FindUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockIUsers)(nil).FindUsers), ctx, arg)
}

// GetUser mocks base method.
func (m *MockIUsers) GetUser(ctx context.Context, arg *dtos.GetUserParams) (*dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, arg)
	ret0, _ := ret[0].(*dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUsersMockRecorder) GetUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUsers)(nil).GetUser), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockIUsers) UpdateUser(ctx context.Context, arg *dtos.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUsersMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUsers)(nil).UpdateUser), ctx, arg)
}

// MockIUsersRepository is a mock of IUsersRepository interface.
type MockIUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersRepositoryMockRecorder
}

// MockIUsersRepositoryMockRecorder is the mock recorder for MockIUsersRepository.
type MockIUsersRepositoryMockRecorder struct {
	mock *MockIUsersRepository
}

// NewMockIUsersRepository creates a new mock instance.
func NewMockIUsersRepository(ctrl *gomock.Controller) *MockIUsersRepository {
	mock := &MockIUsersRepository{ctrl: ctrl}
	mock.recorder = &MockIUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsersRepository) EXPECT() *MockIUsersRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUsersRepository) CreateUser(ctx context.Context, arg *dtos.CreateUserParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUsersRepositoryMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUsersRepository)(nil).CreateUser), ctx, arg)
}

// DeleteUser mocks base method.
func (m *MockIUsersRepository) DeleteUser(ctx context.Context, arg *dtos.DeleteUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUsersRepositoryMockRecorder) DeleteUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUsersRepository)(nil).DeleteUser), ctx, arg)
}

// FindUsers mocks base method.
func (m *MockIUsersRepository) FindUsers(ctx context.Context, arg *dtos.FindUsersParams) ([]*dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", ctx, arg)
	ret0, _ := ret[0].([]*dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockIUsersRepositoryMockRecorder) FindUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockIUsersRepository)(nil).FindUsers), ctx, arg)
}

// GetUser mocks base method.
func (m *MockIUsersRepository) GetUser(ctx context.Context, arg *dtos.GetUserParams) (*dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, arg)
	ret0, _ := ret[0].(*dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUsersRepositoryMockRecorder) GetUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUsersRepository)(nil).GetUser), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockIUsersRepository) UpdateUser(ctx context.Context, arg *dtos.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUsersRepositoryMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUsersRepository)(nil).UpdateUser), ctx, arg)
}

// MockIApp is a mock of IApp interface.
type MockIApp struct {
	ctrl     *gomock.Controller
	recorder *MockIAppMockRecorder
}

// MockIAppMockRecorder is the mock recorder for MockIApp.
type MockIAppMockRecorder struct {
	mock *MockIApp
}

// NewMockIApp creates a new mock instance.
func NewMockIApp(ctrl *gomock.Controller) *MockIApp {
	mock := &MockIApp{ctrl: ctrl}
	mock.recorder = &MockIAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApp) EXPECT() *MockIAppMockRecorder {
	return m.recorder
}

// AuthenticationRequired mocks base method.
func (m *MockIApp) AuthenticationRequired(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthenticationRequired", w, r)
}

// AuthenticationRequired indicates an expected call of AuthenticationRequired.
func (mr *MockIAppMockRecorder) AuthenticationRequired(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationRequired", reflect.TypeOf((*MockIApp)(nil).AuthenticationRequired), w, r)
}

// BadRequest mocks base method.
func (m *MockIApp) BadRequest(w http.ResponseWriter, r *http.Request, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BadRequest", w, r, err)
}

// BadRequest indicates an expected call of BadRequest.
func (mr *MockIAppMockRecorder) BadRequest(w, r, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequest", reflect.TypeOf((*MockIApp)(nil).BadRequest), w, r, err)
}

// CompareHashAndPassword mocks base method.
func (m *MockIApp) CompareHashAndPassword(plaintextPassword, hashedPassword string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", plaintextPassword, hashedPassword)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockIAppMockRecorder) CompareHashAndPassword(plaintextPassword, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockIApp)(nil).CompareHashAndPassword), plaintextPassword, hashedPassword)
}

// ContextTime mocks base method.
func (m *MockIApp) ContextTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContextTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ContextTime indicates an expected call of ContextTime.
func (mr *MockIAppMockRecorder) ContextTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContextTime", reflect.TypeOf((*MockIApp)(nil).ContextTime))
}

// CreateToken mocks base method.
func (m *MockIApp) CreateToken(userID int) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockIAppMockRecorder) CreateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockIApp)(nil).CreateToken), userID)
}

// DecodeJSON mocks base method.
func (m *MockIApp) DecodeJSON(w http.ResponseWriter, r *http.Request, dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeJSON", w, r, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeJSON indicates an expected call of DecodeJSON.
func (mr *MockIAppMockRecorder) DecodeJSON(w, r, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeJSON", reflect.TypeOf((*MockIApp)(nil).DecodeJSON), w, r, dst)
}

// DecodeJSONStrict mocks base method.
func (m *MockIApp) DecodeJSONStrict(w http.ResponseWriter, r *http.Request, dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeJSONStrict", w, r, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeJSONStrict indicates an expected call of DecodeJSONStrict.
func (mr *MockIAppMockRecorder) DecodeJSONStrict(w, r, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeJSONStrict", reflect.TypeOf((*MockIApp)(nil).DecodeJSONStrict), w, r, dst)
}

// GetUserById mocks base method.
func (m *MockIApp) GetUserById(id int) (*lib.IUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*lib.IUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIAppMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIApp)(nil).GetUserById), id)
}

// Hash mocks base method.
func (m *MockIApp) Hash(plaintextPassword string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", plaintextPassword)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockIAppMockRecorder) Hash(plaintextPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIApp)(nil).Hash), plaintextPassword)
}

// InvalidAuthenticationToken mocks base method.
func (m *MockIApp) InvalidAuthenticationToken(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidAuthenticationToken", w, r)
}

// InvalidAuthenticationToken indicates an expected call of InvalidAuthenticationToken.
func (mr *MockIAppMockRecorder) InvalidAuthenticationToken(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidAuthenticationToken", reflect.TypeOf((*MockIApp)(nil).InvalidAuthenticationToken), w, r)
}

// JSON mocks base method.
func (m *MockIApp) JSON(w http.ResponseWriter, status int, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSON", w, status, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSON indicates an expected call of JSON.
func (mr *MockIAppMockRecorder) JSON(w, status, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockIApp)(nil).JSON), w, status, data)
}

// JSONWithHeaders mocks base method.
func (m *MockIApp) JSONWithHeaders(w http.ResponseWriter, status int, data any, headers http.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONWithHeaders", w, status, data, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONWithHeaders indicates an expected call of JSONWithHeaders.
func (mr *MockIAppMockRecorder) JSONWithHeaders(w, status, data, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONWithHeaders", reflect.TypeOf((*MockIApp)(nil).JSONWithHeaders), w, status, data, headers)
}

// Logger mocks base method.
func (m *MockIApp) Logger() lib.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(lib.ILogger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockIAppMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockIApp)(nil).Logger))
}

// MethodNotAllowed mocks base method.
func (m *MockIApp) MethodNotAllowed(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MethodNotAllowed", w, r)
}

// MethodNotAllowed indicates an expected call of MethodNotAllowed.
func (mr *MockIAppMockRecorder) MethodNotAllowed(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodNotAllowed", reflect.TypeOf((*MockIApp)(nil).MethodNotAllowed), w, r)
}

// Mux mocks base method.
func (m *MockIApp) Mux() *httprouter.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mux")
	ret0, _ := ret[0].(*httprouter.Router)
	return ret0
}

// Mux indicates an expected call of Mux.
func (mr *MockIAppMockRecorder) Mux() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mux", reflect.TypeOf((*MockIApp)(nil).Mux))
}

// NotFound mocks base method.
func (m *MockIApp) NotFound(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotFound", w, r)
}

// NotFound indicates an expected call of NotFound.
func (mr *MockIAppMockRecorder) NotFound(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockIApp)(nil).NotFound), w, r)
}

// ParseIntFromRequest mocks base method.
func (m *MockIApp) ParseIntFromRequest(name string, r *http.Request) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIntFromRequest", name, r)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIntFromRequest indicates an expected call of ParseIntFromRequest.
func (mr *MockIAppMockRecorder) ParseIntFromRequest(name, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIntFromRequest", reflect.TypeOf((*MockIApp)(nil).ParseIntFromRequest), name, r)
}

// RequireAuthenticatedUser mocks base method.
func (m *MockIApp) RequireAuthenticatedUser(next http.HandlerFunc) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireAuthenticatedUser", next)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// RequireAuthenticatedUser indicates an expected call of RequireAuthenticatedUser.
func (mr *MockIAppMockRecorder) RequireAuthenticatedUser(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticatedUser", reflect.TypeOf((*MockIApp)(nil).RequireAuthenticatedUser), next)
}

// ServeHTTP mocks base method.
func (m *MockIApp) ServeHTTP() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeHTTP")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockIAppMockRecorder) ServeHTTP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockIApp)(nil).ServeHTTP))
}

// ServerError mocks base method.
func (m *MockIApp) ServerError(w http.ResponseWriter, r *http.Request, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServerError", w, r, err)
}

// ServerError indicates an expected call of ServerError.
func (mr *MockIAppMockRecorder) ServerError(w, r, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerError", reflect.TypeOf((*MockIApp)(nil).ServerError), w, r, err)
}

// SetUserByIDMethod mocks base method.
func (m *MockIApp) SetUserByIDMethod(fn func(int) (*lib.IUser, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserByIDMethod", fn)
}

// SetUserByIDMethod indicates an expected call of SetUserByIDMethod.
func (mr *MockIAppMockRecorder) SetUserByIDMethod(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserByIDMethod", reflect.TypeOf((*MockIApp)(nil).SetUserByIDMethod), fn)
}

// Sqlite3 mocks base method.
func (m *MockIApp) Sqlite3() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sqlite3")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Sqlite3 indicates an expected call of Sqlite3.
func (mr *MockIAppMockRecorder) Sqlite3() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sqlite3", reflect.TypeOf((*MockIApp)(nil).Sqlite3))
}

// UnprocessableEntity mocks base method.
func (m *MockIApp) UnprocessableEntity(w http.ResponseWriter, r *http.Request, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnprocessableEntity", w, r, data)
}

// UnprocessableEntity indicates an expected call of UnprocessableEntity.
func (mr *MockIAppMockRecorder) UnprocessableEntity(w, r, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprocessableEntity", reflect.TypeOf((*MockIApp)(nil).UnprocessableEntity), w, r, data)
}

// VerifyToken mocks base method.
func (m *MockIApp) VerifyToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockIAppMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockIApp)(nil).VerifyToken), token)
}

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockILogger) Debug(msg string, keysAndValues ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug(msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockILogger) Error(msg string, keysAndValues ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockILogger) Fatal(msg string, keysAndValues ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal(msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal), varargs...)
}

// Handler mocks base method.
func (m *MockILogger) Handler() slog.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(slog.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockILoggerMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockILogger)(nil).Handler))
}

// Info mocks base method.
func (m *MockILogger) Info(msg string, keysAndValues ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockILogger) Warn(msg string, keysAndValues ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn(msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn), varargs...)
}
